version: '3.8'

services:
  worker:
    build: .
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - SUPABASE_PUBLIC_ANON_KEY=${SUPABASE_PUBLIC_ANON_KEY}
      - SUPABASE_BUCKET_ORIGINALS=original_docs
      - SUPABASE_BUCKET_REDACTED=redacted_docs
      - OCR_ENGINE=${OCR_ENGINE:-ocrspace}
      - OCRSPACE_API_KEY=${OCRSPACE_API_KEY}
      - USE_LLM_FALLBACK=${USE_LLM_FALLBACK:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PORT=8080
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-5}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DELETE_ORIGINAL_ON_SUCCESS=${DELETE_ORIGINAL_ON_SUCCESS:-true}
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8080/healthz', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:


